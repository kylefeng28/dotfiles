# ~/.config/helix/config.toml
# Inspiration:
# https://www.reddit.com/r/HelixEditor/comments/w3higo/comment/k1okf1g/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button

[editor]
line-number = "relative"
rulers = [80, 120]
cursorline = true
cursorcolumn = true
bufferline = "always"

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

# https://docs.helix-editor.com/master/configuration.html#editorsoft-wrap-section
[editor.soft-wrap]
enable = true
# wrap-at-text-width = true
wrap-indicator = "↩ "

### https://docs.helix-editor.com/master/configuration.html#editorwhitespace-section
[editor.whitespace.render]
space = "all"
tab = "all"
newline = "none"

[editor.whitespace.characters]
space = " "
nbsp = "⍽"    # Non Breaking SPace
tab = "→"
newline = "⏎"
tabpad = "·"  # Tabs will look like "→···" (depending on tab width)

[editor.statusline]
left = [ "mode", "spinner", "diagnostics", "file-name", "version-control" ]
right = [ "position", "position-percentage", "total-line-numbers" ]

[editor.lsp]
display-inlay-hints = true

[editor.indent-guides]
render = true
character = "╎" # Some characters that work well: "▏", "┆", "┊", "⸽"
skip-levels = 1

################################################################################
## vim-inspired keymap for helix.
################################################################################
# helix's select-then-act paradigm is
# fundamentally different from vim's verb-object paradigm.
# However, due to muscle memory and widespread use of vim keymaps (IdeaVim, VSCode VIM, etc),
# I want to use helix with some familiar commands like 0, $, gg, G
# while keeping the helix select-then-act paradigm

# For more ideas, see
# https://github.com/LGUG2Z/helix-vim
# https://github.com/certik/dotfiles/blob/master/.config/helix/config.toml
# https://github.com/helix-editor/helix/issues/4419

[keys.normal]
"esc" = ["collapse_selection", "keep_primary_selection"]
"C-c" = ["collapse_selection", "keep_primary_selection"] # default: toggle-comments
"C-[" = ["collapse_selection", "keep_primary_selection"]

# Undo/redo
"u" = "undo"
"U" = "no_op" # default: redo
"C-r" = "redo"

q = "record_macro"
"Q" = "no_op" # default: record_macro
"@" = "replay_macro"

0 = "goto_line_start"
"$" = "goto_line_end"
G = "goto_last_line"
"%" = "match_brackets" # default: select_all. remapped to <Space>%

# Try to emulate vim visual line and visual block mode; see select mode mappings for more information
V = ["select_mode", "extend_to_line_bounds"]
"C-v" = ["select_mode", "copy_selection_on_next_line"]

C = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection", "insert_mode"]
D = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection"]
Z = { Z = [":write-quit"] }
"*" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_next"]
"#" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_prev"]

x = ["collapse_selection", "delete_selection"] # default: extend_line_below
X = "extend_line_below" # keep helix default
"C-/" = "toggle_comments"

# unmap case change keys (see select mode)
"~" = "no_op"
"`" = "no_op"
"A-`" = "no_op"

# View
"C-e" = "scroll_down"
"C-y" = "scroll_up"

"\\" = ":toggle whitespace.render all none"

[keys.normal.space]
E = ":config-open"
R = ":config-reload"
"%" = "select_all"

# NOTE: uncomment the following to have dd/yy act like in vim, while
# while having di" and yi" trigger select mode (without actually deleting)
# This is more of a crutch since this can never emulate vim directly as it is fundamentally
# against helix's select-then-act paradigm
# [keys.normal.d]
# d = ["extend_to_line_bounds", "yank", "delete_selection"]
# t = ["extend_till_char", "select_mode"]
# i = ["select_textobject_inner", "select_mode"]
# a = ["select_textobject_around", "select_mode"]

# [keys.normal.y]
# y = ["extend_to_line_bounds", "yank", "normal_mode", "collapse_selection"]
# t = ["extend_till_char", "select_mode"]
# i = ["select_textobject_inner", "select_mode"]
# a = ["select_textobject_around", "select_mode"]

[keys.normal.g]
"~" = "switch_case"
u = "switch_to_lowercase"
U = "switch_to_uppercase"

[keys.select]
"esc" = ["collapse_selection", "keep_primary_selection", "normal_mode"]
"C-c" = ["collapse_selection", "keep_primary_selection", "normal_mode"]
"C-[" = ["collapse_selection", "keep_primary_selection", "normal_mode"]
o = "flip_selections"

"0" = "goto_line_start"
"$" = "goto_line_end"

# map vi" -> vmi" and va" -> vma" to be more like vim and save a keystroke
i = ["select_textobject_inner"]
a = ["select_textobject_around"]

"*" = "search_selection" # keep helix default for select mode (was overriden in normal mode)

# Try to emulate vim visual line and visual block mode since these concepts don't exist in helix
# Visual line mode is achieved by using extend_to_line_bounds
# Visual block mode is achieved by using multiple cursors
V = "extend_to_line_bounds"
"C-v" = "copy_selection_on_next_line"
"A-j" = "copy_selection_on_next_line"
"A-k" = "copy_selection_on_prev_line"

d = "delete_selection" # keep default
x = "delete_selection" # default: extend_line_below
X = "extend_line_below" # keep helix default

# unmap case change keys (will be bound to g~/gu/gU)
"~" = ["switch_case", "collapse_selection", "normal_mode"]
"`" = "no_op"
"A-`" = "no_op"
u = ["switch_to_lowercase", "collapse_selection", "normal_mode"]
U = ["switch_to_uppercase", "collapse_selection", "normal_mode"]

[keys.insert]
"C-c" = "normal_mode"
"C-[" = "normal_mode"

# TODO:
# select prevous selection (vim gv): https://github.com/helix-editor/helix/issues/1596
# paste mode: :set auto-pairs false

